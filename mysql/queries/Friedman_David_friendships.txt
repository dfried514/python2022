use friendships_schema;

-- create six new users
INSERT INTO users (first_name, last_name)
VALUES ('Jim', 'Downing'), ('Brian', 'Newton'), ('Tim', 'Rivers'), 
('Sonny', 'Lee'), ('Jack', 'Davies'), ('Laura', 'Flowers');

-- have user 1 be friends with users 2, 4, 6
INSERT INTO friendships (user_id, friend_id)
VALUES (1, 2), (1, 4), (1, 6);

-- have user 2 be friends with users 1, 3, 5
INSERT INTO friendships (user_id, friend_id)
VALUES (2, 1), (2, 3), (2, 5);

-- have user 3 be friends with users 2, 5
INSERT INTO friendships (user_id, friend_id)
VALUES (3, 2), (3, 5);

-- have user 4 be friends with user 3
INSERT INTO friendships (user_id, friend_id)
VALUES (4, 3);

-- have user 5 be friends with users 1, 6
INSERT INTO friendships (user_id, friend_id)
VALUES (5, 1), (5, 6);

-- have user 6 be friends with users 2, 3
INSERT INTO friendships (user_id, friend_id)
VALUES (6, 2), (6, 3);

-- display relationships according to table
SELECT users.first_name, users.last_name, users2.first_name AS friend_first_name, users2.last_name AS friend_last_name FROM users
JOIN friendships ON friendships.user_id = users.id
LEFT JOIN users AS users2 ON friendships.friend_id = users2.id;

-- return all users who are friends with first user, display first_name, last_name
SELECT users2.id, users2.first_name, users2.last_name FROM users AS users2
JOIN friendships ON friendships.friend_id = users2.id
JOIN users ON friendships.user_id = users.id
WHERE users.id = 1;

-- return the count of all friendships
SELECT COUNT(*) FROM friendships;

-- return count of friends for user with most friends
SELECT users.first_name, users.last_name, COUNT(friend_id) 
FROM friendships
JOIN users
ON users.id = friendships.user_id 
GROUP BY user_id
ORDER BY COUNT(friend_id) DESC
LIMIT 1;

-- return the friends of the third user in alphabetical order
SELECT users2.id, users2.first_name, users2.last_name
FROM users
JOIN friendships ON users.id = friendships.user_id
JOIN users AS users2 ON users2.id = friendships.friend_id
WHERE friendships.user_id = 3;


